{
  "openapi": "3.0.0",
  "info": {
    "title": "Lendsqr Wallet Service API",
    "version": "1.0.0",
    "description": "Comprehensive API documentation for the Lendsqr Wallet Service. This service provides secure user management with blacklist verification and comprehensive wallet operations including funding, transfers, and withdrawals. Built with Node.js, TypeScript, Express.js, and MySQL.",
    "contact": {
      "name": "Tijani Sheu",
      "email": "tijani.sheu@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    { 
      "url": "http://localhost:5000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "User management operations including creation and blacklist verification"
    },
    {
      "name": "Wallet",
      "description": "Wallet operations for funding, transfers, and withdrawals"
    }
  ],api": "3.0.0",
  "info": {
    "title": "Lendsqr Wallet Service API",
    "version": "1.0.0",
    "description": "OpenAPI documentation for the Lendsqr Wallet Service."
  },
  "servers": [
    { "url": "http://localhost:5000" }
  ],
  "paths": {
    "/api/users": {
      "post": {
        "summary": "Create a new user (checks blacklist)",
        "description": "Creates a new user account. Checks the Lendsqr Adjutor Karma blacklist before onboarding. Returns user details or error.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Full name of the user." },
                  "email": { "type": "string", "format": "email", "description": "User's email address." }
                },
                "required": ["name", "email"]
              },
              "examples": {
                "valid": {
                  "summary": "Valid user",
                  "value": { "name": "John Doe", "email": "john@example.com" }
                },
                "blacklisted": {
                  "summary": "Blacklisted user",
                  "value": { "name": "Jane Doe", "email": "blacklisted@example.com" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer" },
                    "name": { "type": "string" },
                    "email": { "type": "string" }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "User created",
                    "value": { "id": 1, "name": "John Doe", "email": "john@example.com" }
                  }
                }
              }
            }
          },
          "403": {
            "description": "User is blacklisted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  }
                },
                "examples": {
                  "blacklisted": {
                    "summary": "Blacklisted user",
                    "value": { "message": "User is blacklisted" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "error": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/wallet/fund": {
      "post": {
        "summary": "Fund a user's wallet",
        "description": "Funds a user's wallet. Requires faux token-based authentication.",
        "security": [{ "fauxAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "integer", "description": "ID of the user to fund." },
                  "amount": { "type": "number", "description": "Amount to fund." }
                },
                "required": ["userId", "amount"]
              },
              "examples": {
                "valid": {
                  "summary": "Fund wallet",
                  "value": { "userId": 1, "amount": 100 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet funded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Funded",
                    "value": { "message": "Wallet funded successfully" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "error": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/wallet/transfer": {
      "post": {
        "summary": "Transfer funds between users",
        "description": "Transfers funds from one user's wallet to another. Requires faux token-based authentication.",
        "security": [{ "fauxAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fromUserId": { "type": "integer", "description": "ID of the user sending funds." },
                  "toUserId": { "type": "integer", "description": "ID of the user receiving funds." },
                  "amount": { "type": "number", "description": "Amount to transfer." }
                },
                "required": ["fromUserId", "toUserId", "amount"]
              },
              "examples": {
                "valid": {
                  "summary": "Transfer funds",
                  "value": { "fromUserId": 1, "toUserId": 2, "amount": 50 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Transferred",
                    "value": { "message": "Transfer successful" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "error": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/wallet/withdraw": {
      "post": {
        "summary": "Withdraw funds from wallet",
        "description": "Withdraws funds from a user's wallet. Requires faux token-based authentication.",
        "security": [{ "fauxAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "integer", "description": "ID of the user withdrawing funds." },
                  "amount": { "type": "number", "description": "Amount to withdraw." }
                },
                "required": ["userId", "amount"]
              },
              "examples": {
                "valid": {
                  "summary": "Withdraw funds",
                  "value": { "userId": 1, "amount": 30 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Withdrawn",
                    "value": { "message": "Withdrawal successful" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "error": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "fauxAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Faux token-based authentication. Provide any token value."
      }
    }
  }
}
